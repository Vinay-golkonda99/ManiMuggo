datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int              @id @default(autoincrement())
  name         String
  email        String           @unique
  passwordHash String
  phone        String?
  role         String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  restaurants  Restaurant[]
  orders       Order[]
  reviews      Review[]
  addresses    Address[]
  deliveryDrivers DeliveryDriver?
}

model Restaurant {
  id          Int          @id @default(autoincrement())
  name        String
  address     String
  phone       String?
  ownerId     Int
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  owner       User         @relation(fields: [ownerId], references: [id])
  menuItems   MenuItem[]
  orders      Order[]
  reviews     Review[]
}

model RestaurantType {
  id   Int    @id @default(autoincrement())
  name String
}

model MenuItem {
  id          Int          @id @default(autoincrement())
  restaurantId Int
  name        String
  description String?
  price       Float
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  restaurant  Restaurant   @relation(fields: [restaurantId], references: [id])
  orderItems  OrderItem[]
}

model Order {
  id          Int          @id @default(autoincrement())
  customerId  Int
  restaurantId Int
  status      String
  totalPrice  Float
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  customer    User         @relation(fields: [customerId], references: [id])
  restaurant  Restaurant   @relation(fields: [restaurantId], references: [id])
  orderItems  OrderItem[]
  delivery    Delivery?
}

model OrderItem {
  id        Int       @id @default(autoincrement())
  orderId   Int
  menuItemId Int
  quantity  Int
  price     Float
  order     Order     @relation(fields: [orderId], references: [id])
  menuItem  MenuItem  @relation(fields: [menuItemId], references: [id])
}

model DeliveryDriver {
  id             Int       @id @default(autoincrement())
  userId         Int       @unique
  vehicleType    String?
  licenseNumber  String?
  city           String?
  verified       Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id])
  deliveries     Delivery[]
}

model Delivery {
  id          Int           @id @default(autoincrement())
  orderId     Int           @unique
  driverId    Int
  pickupTime  DateTime?
  deliveryTime DateTime?
  status      String
  order       Order         @relation(fields: [orderId], references: [id])
  driver      DeliveryDriver @relation(fields: [driverId], references: [id])
}

model Review {
  id          Int       @id @default(autoincrement())
  customerId  Int
  restaurantId Int
  rating      Int
  comment     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  customer    User      @relation(fields: [customerId], references: [id])
  restaurant  Restaurant @relation(fields: [restaurantId], references: [id])
}

model Address {
  id        Int       @id @default(autoincrement())
  userId    Int
  address   String
  city      String
  province  String
  country   String
  postalCode String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
}

model DeliveryDriver {
  id             Int       @id @default(autoincrement())
  userId         Int       @unique
  vehicleType    String?
  licenseNumber  String?
  city           String?
  phone          String?   // Phone number field
  verified       Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id])
  deliveries     Delivery[]
  photoUrl       String?   // URL for the driver's photo
  licensePhotoUrl String?  // URL for the driver's license photo
}

